/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package guiCluedo.ui;

import java.awt.*;
import java.awt.Color;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.*;
import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;
import guiCluedo.game.Player;

/**
 *
 * @author James
 */
public class startScreen {
	public int numberOPlayers = 2;
	private int counter = 1;
	public static ArrayList<Player> players = new ArrayList<Player>();
	private ArrayList<String> chars = new ArrayList<>(Arrays.asList("Miss Scarlet", "Colonel Mustard","Mrs. White", "The Reverend Green", "Mrs. Peacock", "Professor Plum"));
	private ArrayList<String> iColours = new ArrayList<>(Arrays.asList("Red", "Green", "Blue", "White", "Yellow", "Purple"));
	private ButtonGroup characterRadios = new ButtonGroup();
	private ButtonGroup colourRadios = new ButtonGroup();
	/**
	 * Creates new form startScreen
	 */
	private void missScarlettActionPerformed(ActionEvent e) {
		// TODO add your code here
	}

	public startScreen() {
		initComponents();
		
		//Create button groups
		characterRadios.add(missScarlet);
		characterRadios.add(mrsPeacock);
		characterRadios.add(profPlum);
		characterRadios.add(mrsWhite);
		characterRadios.add(revGreen);
		characterRadios.add(colonelMustard);
		
		colourRadios.add(colourBlue);
		colourRadios.add(colourGreen);
		colourRadios.add(colourPurple);
		colourRadios.add(colourRed);
		colourRadios.add(colourWhite);
		colourRadios.add(colourYellow);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	// Generated using JFormDesigner Evaluation license - James Barfoote
	private void initComponents() {
		startScreenForm = new JFrame();
		donePlayerSetup = new JButton();
		mainYNameTxt = new JLabel();
		playerName = new JTextField();
		selectionHeadText = new JLabel();
		charSubCatTxt = new JLabel();
		colourSubTxt = new JLabel();
		missScarlet = new JRadioButton();
		profPlum = new JRadioButton();
		mrsWhite = new JRadioButton();
		colonelMustard = new JRadioButton();
		revGreen = new JRadioButton();
		mrsPeacock = new JRadioButton();
		colourRed = new JRadioButton();
		colourBlue = new JRadioButton();
		colourYellow = new JRadioButton();
		colourPurple = new JRadioButton();
		colourWhite = new JRadioButton();
		colourGreen = new JRadioButton();
		setPlayersButton = new JButton();
		setPlayers = new JDialog();
		setPHowManyText = new JLabel();
		okNumPlayers = new JButton();
		setPHeadText = new JLabel();
		numPLayers = new JComboBox<>();
		warning = new JDialog();
		warningTextHead = new JLabel();
		warningOk = new JButton();
		warningLine1 = new JLabel();
		warningLine2 = new JLabel();

		//======== startScreenForm ========
		{
			startScreenForm.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
			Container startScreenFormContentPane = startScreenForm.getContentPane();

			//---- donePlayerSetup ----
			donePlayerSetup.setText("Done");
			donePlayerSetup.setToolTipText("Done setting up this player and go to the next player");
			donePlayerSetup.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					donePlayerSetupActionPerformed(e);
				}
			});

			//---- mainYNameTxt ----
			mainYNameTxt.setText("You name:");

			//---- playerName ----
			playerName.setToolTipText("Your name. This name will be displayed when it is your turn");

			//---- selectionHeadText ----
			selectionHeadText.setFont(new Font("Tahoma", Font.BOLD, 36));
			selectionHeadText.setText("Player Selection");

			//---- charSubCatTxt ----
			charSubCatTxt.setFont(new Font("Tahoma", Font.BOLD, 11));
			charSubCatTxt.setText("Character:");

			//---- colourSubTxt ----
			colourSubTxt.setFont(new Font("Tahoma", Font.BOLD, 11));
			colourSubTxt.setText("Colour:");

			//---- missScarlet ----
			missScarlet.setText("Miss Scarlet");
			missScarlet.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					missScarlettActionPerformed(e);
				}
			});

			//---- profPlum ----
			profPlum.setText("Professor Plum");

			//---- mrsWhite ----
			mrsWhite.setText("Mrs. White");
			mrsWhite.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					mrsWhiteActionPerformed(e);
				}
			});

			//---- colonelMustard ----
			colonelMustard.setText("Colonel Mustard");

			//---- revGreen ----
			revGreen.setText("The Reverend Green");

			//---- mrsPeacock ----
			mrsPeacock.setText("Mrs. Peacock");

			//---- colourRed ----
			colourRed.setText("Red");

			//---- colourBlue ----
			colourBlue.setText("Blue");

			//---- colourYellow ----
			colourYellow.setText("Yellow");
			colourYellow.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					colourYellowActionPerformed(e);
				}
			});

			//---- colourPurple ----
			colourPurple.setText("Purple");

			//---- colourWhite ----
			colourWhite.setText("White");

			//---- colourGreen ----
			colourGreen.setText("Green");

			//---- setPlayersButton ----
			setPlayersButton.setText("Set # Players");
			setPlayersButton.setToolTipText("Set the number of players for the game. This only needs to be selected once");
			setPlayersButton.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					setPlayersButtonActionPerformed(e);
				}
			});

			GroupLayout startScreenFormContentPaneLayout = new GroupLayout(startScreenFormContentPane);
			startScreenFormContentPane.setLayout(startScreenFormContentPaneLayout);
			startScreenFormContentPaneLayout.setHorizontalGroup(
				startScreenFormContentPaneLayout.createParallelGroup()
					.addGroup(startScreenFormContentPaneLayout.createSequentialGroup()
						.addGroup(startScreenFormContentPaneLayout.createParallelGroup()
							.addGroup(startScreenFormContentPaneLayout.createSequentialGroup()
								.addGap(231, 231, 231)
								.addComponent(donePlayerSetup, GroupLayout.PREFERRED_SIZE, 101, GroupLayout.PREFERRED_SIZE))
							.addGroup(startScreenFormContentPaneLayout.createSequentialGroup()
								.addGap(149, 149, 149)
								.addComponent(mainYNameTxt)
								.addGap(18, 18, 18)
								.addComponent(playerName, GroupLayout.PREFERRED_SIZE, 177, GroupLayout.PREFERRED_SIZE))
							.addGroup(startScreenFormContentPaneLayout.createSequentialGroup()
								.addContainerGap()
								.addComponent(setPlayersButton)
								.addGap(42, 42, 42)
								.addComponent(selectionHeadText))
							.addGroup(startScreenFormContentPaneLayout.createSequentialGroup()
								.addGap(70, 70, 70)
								.addGroup(startScreenFormContentPaneLayout.createParallelGroup()
									.addGroup(startScreenFormContentPaneLayout.createSequentialGroup()
										.addComponent(charSubCatTxt)
										.addGap(253, 253, 253)
										.addComponent(colourSubTxt))
									.addGroup(startScreenFormContentPaneLayout.createSequentialGroup()
										.addGroup(startScreenFormContentPaneLayout.createParallelGroup()
											.addGroup(startScreenFormContentPaneLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
												.addComponent(revGreen)
												.addComponent(missScarlet, GroupLayout.Alignment.LEADING)
												.addComponent(mrsPeacock, GroupLayout.Alignment.LEADING))
											.addComponent(mrsWhite)
											.addComponent(profPlum)
											.addComponent(colonelMustard))
										.addGap(187, 187, 187)
										.addGroup(startScreenFormContentPaneLayout.createParallelGroup()
											.addComponent(colourRed)
											.addComponent(colourBlue)
											.addComponent(colourYellow)
											.addComponent(colourPurple)
											.addComponent(colourWhite)
											.addComponent(colourGreen))))))
						.addContainerGap(148, Short.MAX_VALUE))
			);
			startScreenFormContentPaneLayout.setVerticalGroup(
				startScreenFormContentPaneLayout.createParallelGroup()
					.addGroup(GroupLayout.Alignment.TRAILING, startScreenFormContentPaneLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(startScreenFormContentPaneLayout.createParallelGroup()
							.addComponent(selectionHeadText)
							.addComponent(setPlayersButton))
						.addGap(18, 18, 18)
						.addGroup(startScreenFormContentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
							.addComponent(mainYNameTxt)
							.addComponent(playerName, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
						.addGap(32, 32, 32)
						.addGroup(startScreenFormContentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
							.addComponent(charSubCatTxt)
							.addComponent(colourSubTxt))
						.addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(startScreenFormContentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
							.addComponent(missScarlet)
							.addComponent(colourRed))
						.addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(startScreenFormContentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
							.addComponent(profPlum)
							.addComponent(colourGreen))
						.addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(startScreenFormContentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
							.addComponent(mrsWhite)
							.addComponent(colourBlue))
						.addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(startScreenFormContentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
							.addComponent(colonelMustard)
							.addComponent(colourYellow))
						.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(startScreenFormContentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
							.addComponent(revGreen)
							.addComponent(colourPurple))
						.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(startScreenFormContentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
							.addComponent(mrsPeacock)
							.addComponent(colourWhite))
						.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(donePlayerSetup, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
						.addContainerGap())
			);
			startScreenForm.pack();
			startScreenForm.setLocationRelativeTo(startScreenForm.getOwner());
		}

		//======== setPlayers ========
		{
			setPlayers.setAlwaysOnTop(true);
			setPlayers.setMinimumSize(new Dimension(400, 200));
			Container setPlayersContentPane = setPlayers.getContentPane();

			//---- setPHowManyText ----
			setPHowManyText.setText("How many players?");

			//---- okNumPlayers ----
			okNumPlayers.setText("OK");
			okNumPlayers.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					okNumPlayersActionPerformed(e);
				}
			});

			//---- setPHeadText ----
			setPHeadText.setFont(new Font("Tahoma", Font.BOLD, 24));
			setPHeadText.setText("Welcome to Cluedo!");

			//---- numPLayers ----
			numPLayers.setMaximumRowCount(5);
			numPLayers.setModel(new DefaultComboBoxModel<>(new String[] {
				"2",
				"3",
				"4",
				"5",
				"6"
			}));
			numPLayers.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					numPLayersActionPerformed(e);
				}
			});

			GroupLayout setPlayersContentPaneLayout = new GroupLayout(setPlayersContentPane);
			setPlayersContentPane.setLayout(setPlayersContentPaneLayout);
			setPlayersContentPaneLayout.setHorizontalGroup(
				setPlayersContentPaneLayout.createParallelGroup()
					.addGroup(setPlayersContentPaneLayout.createSequentialGroup()
						.addGroup(setPlayersContentPaneLayout.createParallelGroup()
							.addGroup(setPlayersContentPaneLayout.createSequentialGroup()
								.addGap(39, 39, 39)
								.addComponent(setPHeadText))
							.addGroup(setPlayersContentPaneLayout.createSequentialGroup()
								.addGap(128, 128, 128)
								.addComponent(okNumPlayers))
							.addGroup(setPlayersContentPaneLayout.createSequentialGroup()
								.addGap(108, 108, 108)
								.addGroup(setPlayersContentPaneLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
									.addComponent(setPHowManyText, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
									.addComponent(numPLayers))))
						.addContainerGap(48, Short.MAX_VALUE))
			);
			setPlayersContentPaneLayout.setVerticalGroup(
				setPlayersContentPaneLayout.createParallelGroup()
					.addGroup(setPlayersContentPaneLayout.createSequentialGroup()
						.addGap(8, 8, 8)
						.addComponent(setPHeadText)
						.addGap(18, 18, 18)
						.addComponent(setPHowManyText)
						.addGap(18, 18, 18)
						.addComponent(numPLayers, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
						.addComponent(okNumPlayers)
						.addGap(23, 23, 23))
			);
		}

		//======== warning ========
		{
			warning.setAlwaysOnTop(true);
			warning.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
			warning.setTitle("WARNING!!");
			warning.setMinimumSize(new Dimension(465, 183));
			Container warningContentPane = warning.getContentPane();

			//---- warningTextHead ----
			warningTextHead.setFont(new Font("Tahoma", Font.BOLD, 36));
			warningTextHead.setText("WARNING!");

			//---- warningOk ----
			warningOk.setText("OK");
			warningOk.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					warningOkActionPerformed(e);
				}
			});

			//---- warningLine1 ----
			warningLine1.setText("Make sure that you have selected one from character and one from colour and only one");

			//---- warningLine2 ----
			warningLine2.setText("Make sure that you have also entered your name");

			GroupLayout warningContentPaneLayout = new GroupLayout(warningContentPane);
			warningContentPane.setLayout(warningContentPaneLayout);
			warningContentPaneLayout.setHorizontalGroup(
				warningContentPaneLayout.createParallelGroup()
					.addGroup(warningContentPaneLayout.createSequentialGroup()
						.addGroup(warningContentPaneLayout.createParallelGroup()
							.addGroup(warningContentPaneLayout.createSequentialGroup()
								.addGap(121, 121, 121)
								.addComponent(warningTextHead))
							.addGroup(warningContentPaneLayout.createSequentialGroup()
								.addContainerGap()
								.addComponent(warningLine1))
							.addGroup(warningContentPaneLayout.createSequentialGroup()
								.addGap(175, 175, 175)
								.addComponent(warningOk, GroupLayout.PREFERRED_SIZE, 79, GroupLayout.PREFERRED_SIZE))
							.addGroup(warningContentPaneLayout.createSequentialGroup()
								.addGap(98, 98, 98)
								.addComponent(warningLine2)))
						.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
			);
			warningContentPaneLayout.setVerticalGroup(
				warningContentPaneLayout.createParallelGroup()
					.addGroup(warningContentPaneLayout.createSequentialGroup()
						.addComponent(warningTextHead)
						.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(warningLine1)
						.addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(warningLine2)
						.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
						.addComponent(warningOk)
						.addContainerGap())
			);
		}
    }// </editor-fold>//GEN-END:initComponents

	private void okNumPlayersActionPerformed(java.awt.event.ActionEvent evt) {                                             
		String p = (String)numPLayers.getSelectedItem();
		if(p.equals("2"))
		{
			numberOPlayers = 2;
		}
		else if(p.equals("3"))
		{
			numberOPlayers = 3;
		}
		else if(p.equals("4"))
		{
			numberOPlayers = 4;
		}
		else if(p.equals("5"))
		{
			numberOPlayers = 5;
		}
		else if(p.equals("6"))
		{
			numberOPlayers = 6;
		}
		else
		{
			numberOPlayers = 2;
		}

		System.out.println(numberOPlayers);
		setPlayers.setVisible(false);
	}

	private void donePlayerSetupActionPerformed(java.awt.event.ActionEvent evt) {                                                
		String pName = "";
		if(playerName.getText() != "")
		{
			pName = playerName.getText();
		}
		else
		{
			warning.setVisible(true);
		}
		
		String cCharacter = "";		
		cCharacter = getCharacter();
		if(!cCharacter.equals("")){
		 System.out.println("Character was: " + cCharacter);
		}
		else
		{
			System.out.println("Please select a character");
			warning.setVisible(true);
			cCharacter = getCharacter();
			return;
		}
		Color cColour = getColour();
		if(!cColour.equals(null))
		{
			System.err.println("Colour was: " + cColour);
		}
		else
		{
			System.out.println("Please select a colour");
			warning.setVisible(true);
			cColour = getColour();
			return;
		}
		Player p = new Player(pName, cCharacter, cColour, counter);
		iColours.remove(cColour);
		chars.remove(cCharacter);
		players.add(p);
		colourRadios.clearSelection();
		characterRadios.clearSelection();
		playerName.setText("");
//		startScreenForm.setVisible(false);//Hide the player setup screen

		counter++;
		if(counter > numberOPlayers )
		{
			//Launch UI
			UI ui = new UI(players);
			ui.setVisible(true);
			startScreenForm.setVisible(false);//Hide the player setup screen
			return;

		}
	}

	private Color getColour() {
		if(colourRed.isSelected())
		{
			colourRed.setEnabled(false);
			if(iColours.contains("Red")){
				return Color.RED;
			}
			//Display error message, ask user to choose something else as this has already been chosen	
		}
		else if(colourGreen.isSelected())
		{
			colourGreen.setEnabled(false);
			if(iColours.contains("Green")){;
				return Color.GREEN;
			}
			//Display error message	
		}
		else if(colourBlue.isSelected())
		{
			colourGreen.setEnabled(false);
			if(iColours.contains("Blue")){
				return Color.BLUE;
			}
			//Display error message		
		}
		else if(colourYellow.isSelected())
		{
			colourYellow.setEnabled(false);
			if(iColours.contains("Yellow")){
				return Color.YELLOW;
			}
			//Display error message		
		}
		else if(colourWhite.isSelected())
		{
			colourWhite.setEnabled(false);
			if(iColours.contains("White")){
				return Color.WHITE;
			}
			//Display error message		
		}
		else if(colourPurple.isSelected())
		{
			colourPurple.setEnabled(false);
			if(iColours.contains("Purple")){
				return Color.PINK;
			}
			//Display error message		
		}
		return null;
	}

	private String getCharacter() {
		if(colonelMustard.isSelected())
		{
			colonelMustard.setEnabled(false);
			String character = "Colonel Mustard";
			if(chars.contains(character)){
				return character;
			}
			//Display error message	
		}
		else if(missScarlet.isSelected())
		{
			missScarlet.setEnabled(false);
			String character = "Miss Scarlet";
			if(chars.contains(character)){
				return character;
			}
			//Display error message	
		}
		else if(mrsPeacock.isSelected())
		{
			mrsPeacock.setEnabled(false);
			String character = "Mrs. Peacock";
			if(chars.contains(character)){
				return character;
			}
			//Display error message	
		}
		else if(mrsWhite.isSelected())
		{
			mrsWhite.setEnabled(false);
			String character = "Mrs. White";
			if(chars.contains(character)){
				return character;
			}
			//Display error message	
		}
		else if(profPlum.isSelected())
		{
			profPlum.setEnabled(false);
			String character = "Professor Plum";
			if(chars.contains(character)){
				return character;
			}
			//Display error message	
		}
		else if(revGreen.isSelected())
		{
			revGreen.setEnabled(false);
			String character = "The Reverend Green";
			if(chars.contains(character)){
				return character;
			}
			//Display error message	
		}
		return "";
	}

	private void missScarletActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_missScarletActionPerformed
		// TODO add your handling code here:
	}//GEN-LAST:event_missScarletActionPerformed

	private void mrsWhiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mrsWhiteActionPerformed
		// TODO add your handling code here:
	}//GEN-LAST:event_mrsWhiteActionPerformed

	private void colourYellowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colourYellowActionPerformed
		// TODO add your handling code here:
	}//GEN-LAST:event_colourYellowActionPerformed

	private void numPLayersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numPLayersActionPerformed

	}//GEN-LAST:event_numPLayersActionPerformed

	private void setPlayersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPlayersButtonActionPerformed

		setPlayers.setVisible(true);
	}//GEN-LAST:event_setPlayersButtonActionPerformed

    private void warningOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warningOkActionPerformed
        warning.setVisible(false);
    }//GEN-LAST:event_warningOkActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(startScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(startScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(startScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(startScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new startScreen().startScreenForm.setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
	// Generated using JFormDesigner Evaluation license - James Barfoote
	JFrame startScreenForm;
	private JButton donePlayerSetup;
	private JLabel mainYNameTxt;
	private JTextField playerName;
	private JLabel selectionHeadText;
	private JLabel charSubCatTxt;
	private JLabel colourSubTxt;
	private JRadioButton missScarlet;
	private JRadioButton profPlum;
	private JRadioButton mrsWhite;
	private JRadioButton colonelMustard;
	private JRadioButton revGreen;
	private JRadioButton mrsPeacock;
	private JRadioButton colourRed;
	private JRadioButton colourBlue;
	private JRadioButton colourYellow;
	private JRadioButton colourPurple;
	private JRadioButton colourWhite;
	private JRadioButton colourGreen;
	private JButton setPlayersButton;
	private JDialog setPlayers;
	private JLabel setPHowManyText;
	private JButton okNumPlayers;
	private JLabel setPHeadText;
	private JComboBox<String> numPLayers;
	private JDialog warning;
	private JLabel warningTextHead;
	private JButton warningOk;
	private JLabel warningLine1;
	private JLabel warningLine2;
    // End of variables declaration//GEN-END:variables
}
